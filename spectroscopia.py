import numpy as np
import scipy.signal as signal

import matplotlib.pyplot as plt

# Создание произвольного набора данных
np.random.seed(0)  # устанавливает начальное значение (или "зерно") для генератора случайных чисел в библиотеке NumPy. Это позволяет обеспечить воспроизводимость результатов.
frequency = np.linspace(1, 10, 1000)  # Частота от 1 до 10 ГГц
intensity = abs(np.sin(frequency)) + abs(0.5 * np.random.normal(size=frequency.size))
# делает следующее:
#     np.sin(frequency): Вычисляет синус для каждого значения в массиве frequency. Так как frequency состоит из значений от 1 до 10, np.sin(frequency) возвращает массив синусов для этих значений.
#     np.random.normal(size=frequency.size): Генерирует массив случайных чисел, распределённых по нормальному закону (среднее 0 и стандартное отклонение 1). Размер этого массива равен количеству элементов в frequency.
#     0.5 * np.random.normal(size=frequency.size): Умножает каждый элемент массива случайных чисел на 0.5, уменьшая его разброс.
#     abs(...): Функция abs берёт абсолютные значения. Это гарантирует, что и значения синуса, и значения случайного шума будут неотрицательными.
#     Суммирование: Наконец, результаты синуса и случайного шума складываются, создавая итоговый массив intensity, который представляет собой интенсивность с добавленным шумом.
# Таким образом, вы получаете массив значений интенсивности, который имеет синусоидальную форму с шумом, что может отражать реальное поведение в данных микроволновой спектроскопии.

print(frequency, intensity)

# Поиск пиков
peaks, _ = signal.find_peaks(intensity, height=0)
#выполняет поиск пиков в массиве intensity с помощью функции find_peaks из библиотеки scipy.signal. Давайте разберем, что она делает:
#    signal.find_peaks(...): Эта функция находит локальные максимумы (пики) в одномерном массиве данных. Она анализирует значения и определяет, какие из них являются пиками на основе заданных параметров.
#    intensity: Это массив значений интенсивности, в котором мы ищем пики. Обычно пики представляют собой точки, где значение интенсивности значительно выше, чем у соседних значений.
#    height=0: Этот параметр задаёт минимальную высоту пика. В данном случае мы указываем, что нас интересуют все пики, высота которых больше 0. Это означает, что любые положительные пики будут учтены.
#    peaks, _: Функция find_peaks возвращает два значения:
#        peaks: массив индексов, где расположены пики.
#        _: второй элемент (обычно) содержит дополнительные данные, такие как высота пиков, которые мы здесь не используем, поэтому мы можем просто записать его в _.
#Таким образом, после выполнения этой строки кода переменная peaks будет содержать индексы всех найденных пиков в массиве intensity, которые соответствуют локальным максимумам. Вы можете использовать эти индексы для дальнейшего анализа или визуализации, например, выделяя пики на графике.

print(peaks)

# Построение графиков
plt.figure(figsize=(10, 5))
plt.plot(frequency, intensity, label='Интенсивность', color='blue')
plt.scatter(frequency[peaks], intensity[peaks], color='red', label='Пики')
#выполняет следующую задачу:
#    plt.scatter(...): Эта функция из библиотеки matplotlib используется для создания графика разброса (scatter plot). В отличие от линейного графика, точки на графике разброса представляют собой отдельные значения.
#    frequency[peaks]: Здесь мы используем массив peaks, чтобы извлечь частоты, соответствующие найденным пикам. Это означает, что мы берем только те элементы из массива frequency, которые находятся в индексах, указанных в peaks.
#    intensity[peaks]: Аналогично, мы извлекаем значения интенсивности, которые соответствуют найденным пикам. Таким образом, мы получаем интенсивности пиков.
#    color='red': Этот параметр задает цвет точек на графике. В данном случае все пики будут отображаться красным цветом.
#    label='Пики': Это задает метку для графика, которая будет отображена в легенде. Позже вы можете вызвать plt.legend(), чтобы показать эту легенду на графике.
#Таким образом, после выполнения этой строки кода на графике будут добавлены красные точки, указывающие на местоположение найденных пиков, что помогает визуально выделить эти важные участки данных.

plt.xlabel('Частота (ГГц)')
plt.ylabel('Интенсивность')
plt.title('Анализ данных спектроскопии')
plt.legend()
plt.grid()
plt.show()
